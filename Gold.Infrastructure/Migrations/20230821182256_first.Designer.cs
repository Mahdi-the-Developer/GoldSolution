// <auto-generated />
using System;
using Gold.Infrastructure.GoldDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gold.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230821182256_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Assets.UserGoldAsset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("EarnedTotalCash")
                        .HasColumnType("float");

                    b.Property<double>("GoldAmount")
                        .HasColumnType("float");

                    b.Property<double>("PayedTotalCash")
                        .HasColumnType("float");

                    b.Property<string>("ToAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCashAsset")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ToAppUserId");

                    b.ToTable("UserGoldAssets");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.SystemCashToGold", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Delay")
                        .HasColumnType("bigint");

                    b.Property<double>("EarnedGold")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<decimal>("LeftCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SpentCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ToAppUserId");

                    b.ToTable("SystemCashToGolds");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.SystemGoldToCash", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Delay")
                        .HasColumnType("bigint");

                    b.Property<decimal>("EarnedCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<decimal>("LeftCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("LeftGold")
                        .HasColumnType("float");

                    b.Property<double>("SoldGold")
                        .HasColumnType("float");

                    b.Property<string>("ToAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TotalGold")
                        .HasColumnType("float");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ToAppUserId");

                    b.ToTable("SystemGoldToCashs");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AssetCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<string>("PayBillId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserCashToGold", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Delay")
                        .HasColumnType("bigint");

                    b.Property<double>("EarnedGold")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<decimal>("LeftCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SpentCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserGoldAssetId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ToAppUserId");

                    b.HasIndex("UserGoldAssetId");

                    b.ToTable("UserCashGolds");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserGoldToCash", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Delay")
                        .HasColumnType("bigint");

                    b.Property<decimal>("EarnedCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<double>("LeftGold")
                        .HasColumnType("float");

                    b.Property<double>("SpentGold")
                        .HasColumnType("float");

                    b.Property<string>("ToAppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalGold")
                        .HasColumnType("float");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserGoldAssetId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ToAppUserId");

                    b.HasIndex("UserGoldAssetId");

                    b.ToTable("UserGoldCashs");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserSystemCashToGoldBill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("GoldAmount")
                        .HasColumnType("float");

                    b.Property<string>("ToSystemGoldToCashId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToUserCashToGoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ToSystemGoldToCashId");

                    b.HasIndex("ToUserCashToGoldId");

                    b.ToTable("UserSystemCashToGoldBills");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserSystemGoldToCashBill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("GoldAmount")
                        .HasColumnType("float");

                    b.Property<string>("ToSystemCashToGoldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToUserGoldToCashId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ToSystemCashToGoldId");

                    b.HasIndex("ToUserGoldToCashId");

                    b.ToTable("UserSystemGoldToCashBills");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Product.GoldPrice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("GoldPrices");

                    b.HasData(
                        new
                        {
                            Id = "253f7eec-9cd2-432e-b4b2-7508b23abc14",
                            DateTime = new DateTime(2023, 8, 21, 21, 52, 56, 434, DateTimeKind.Local).AddTicks(9968),
                            Price = 105000.0
                        });
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Product.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "0f25423d-1549-4b7c-8723-33ca6a5b4c45",
                            Name = "Gold",
                            UnitName = "گرم"
                        });
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Ticket.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Ticket.TicketMessage", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad6151ed16984999b3ff121c5c0bfd96",
                            ConcurrencyStamp = "1",
                            Name = "MainAdmin",
                            NormalizedName = "MainAdmin"
                        });
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c72dff883b3403e81dc7bf88ce26b8a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4939e06c-d5dd-4fe6-954d-29d1c8a6290f",
                            CreatDateTime = new DateTime(2023, 8, 21, 21, 52, 56, 429, DateTimeKind.Local).AddTicks(9342),
                            EmailConfirmed = false,
                            FirstName = "Mahdi",
                            LastName = "Montazeri",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOh8zb36yHqMoZlkVnV7KeWhThGr6t1MHZLjy3VXc0xkHWC4f/ob9CEcUmNwH9tjIg==",
                            PhoneNumber = "09125850371",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "MainAdmin"
                        });
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "ad6151ed16984999b3ff121c5c0bfd96",
                            UserId = "8c72dff883b3403e81dc7bf88ce26b8a"
                        });
                });

            modelBuilder.Entity("ApplicationRoleClaim", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApplicationUserLogin", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationUserToken", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Assets.UserGoldAsset", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "ToAppUser")
                        .WithMany()
                        .HasForeignKey("ToAppUserId");

                    b.Navigation("ToAppUser");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.SystemCashToGold", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "ToAppUser")
                        .WithMany()
                        .HasForeignKey("ToAppUserId");

                    b.Navigation("ToAppUser");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.SystemGoldToCash", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "ToAppUser")
                        .WithMany()
                        .HasForeignKey("ToAppUserId");

                    b.Navigation("ToAppUser");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserCashToGold", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "ToAppUser")
                        .WithMany()
                        .HasForeignKey("ToAppUserId");

                    b.HasOne("Gold.Core.Domain.Entities.Assets.UserGoldAsset", null)
                        .WithMany("ToCashGolds")
                        .HasForeignKey("UserGoldAssetId");

                    b.Navigation("ToAppUser");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserGoldToCash", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "ToAppUser")
                        .WithMany()
                        .HasForeignKey("ToAppUserId");

                    b.HasOne("Gold.Core.Domain.Entities.Assets.UserGoldAsset", null)
                        .WithMany("ToGoldCashs")
                        .HasForeignKey("UserGoldAssetId");

                    b.Navigation("ToAppUser");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserSystemCashToGoldBill", b =>
                {
                    b.HasOne("Gold.Core.Domain.Entities.Finance.SystemGoldToCash", "ToSystemGoldToCash")
                        .WithMany("ToUserSystemCashToGoldBills")
                        .HasForeignKey("ToSystemGoldToCashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Core.Domain.Entities.Finance.UserCashToGold", "ToUserCashToGold")
                        .WithMany("ToUserSystemCashToGoldBills")
                        .HasForeignKey("ToUserCashToGoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToSystemGoldToCash");

                    b.Navigation("ToUserCashToGold");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserSystemGoldToCashBill", b =>
                {
                    b.HasOne("Gold.Core.Domain.Entities.Finance.SystemCashToGold", "ToSystemCashToGold")
                        .WithMany("ToUserSystemGoldToCashBills")
                        .HasForeignKey("ToSystemCashToGoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Core.Domain.Entities.Finance.UserGoldToCash", "ToUserGoldToCash")
                        .WithMany("ToUserSystemGoldToCashBills")
                        .HasForeignKey("ToUserGoldToCashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToSystemCashToGold");

                    b.Navigation("ToUserGoldToCash");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Product.GoldPrice", b =>
                {
                    b.HasOne("Gold.Core.Domain.Entities.Product.Product", null)
                        .WithMany("ToGoldPrices")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Ticket.TicketMessage", b =>
                {
                    b.HasOne("Gold.Core.Domain.Entities.Ticket.Ticket", null)
                        .WithMany("Messages")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationUserClaim", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gold.Core.Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Assets.UserGoldAsset", b =>
                {
                    b.Navigation("ToCashGolds");

                    b.Navigation("ToGoldCashs");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.SystemCashToGold", b =>
                {
                    b.Navigation("ToUserSystemGoldToCashBills");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.SystemGoldToCash", b =>
                {
                    b.Navigation("ToUserSystemCashToGoldBills");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserCashToGold", b =>
                {
                    b.Navigation("ToUserSystemCashToGoldBills");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Finance.UserGoldToCash", b =>
                {
                    b.Navigation("ToUserSystemGoldToCashBills");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("ToGoldPrices");
                });

            modelBuilder.Entity("Gold.Core.Domain.Entities.Ticket.Ticket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Gold.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
